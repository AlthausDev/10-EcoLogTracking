@page "/LogList"
@using EcoLogTracking.Client.Models


@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject ILocalStorageService storageService

<div class="main-container">   

    @RenderLoadingIndicator()

    @if (!IsLoading)
    {
        <Grid TItem="Log"
              AllowFiltering="false"
              AllowPaging="true"
              PageSize="100"
              AllowRowClick="true"
              AllowSorting="true"
              HeaderRowCssClass="bg-black text-black"
              DataProvider="LogsDataProvider"          
              Responsive="true"
              EmptyText="No se han obtenido registros"
              class="table rounded-grid"
              @ref="DataGrid">

            <GridColumn TItem="Log" HeaderText="ID" PropertyName="ID" SortKeySelector="item => item.Id" IsDefaultSortColumn="true">
                @context.Id
            </GridColumn>

            <GridColumn TItem="Log" HeaderText="Equipo" PropertyName="MachineName" SortKeySelector="item => item.MachineName" IsDefaultSortColumn="true">
                @context.MachineName
            </GridColumn>

            <GridColumn TItem="Log" HeaderText="Fecha/Hora" PropertyName="Logged" SortKeySelector="item => item.Logged" IsDefaultSortColumn="true">
                @context.Logged
            </GridColumn>

            <GridColumn TItem="Log" HeaderText="Nivel" PropertyName="Level" SortKeySelector="item => item.Level" IsDefaultSortColumn="true">
                @context.Level
            </GridColumn>

            <GridColumn TItem="Log" HeaderText="Mensaje" PropertyName="Message" SortKeySelector="item => item.Message" IsDefaultSortColumn="true">
                @context.Message
            </GridColumn>

            <GridColumn TItem="Log" HeaderText="Logger" PropertyName="Logger" SortKeySelector="item => item.Logger" IsDefaultSortColumn="true">
                @context.Logger
            </GridColumn>

            <GridColumn TItem="Log" HeaderText="Metodo" PropertyName="Request_method" SortKeySelector="item => item.Request_method" IsDefaultSortColumn="true">
                @context.Request_method
            </GridColumn> 
        </Grid>
    }
</div>


<section id="bottom" />

<script>
    var mybutton = document.getElementById("scrollBtn");
    var mybuttonTop = document.getElementById("scrollBtnDown");

    window.onscroll = function () { scrollFunction() };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            mybutton.style.display = "block";
        } else {
            mybutton.style.display = "none";
        }
    }

    window.addEventListener('scroll', (e) => {
        const body = document.body;
        const parent = body.parentElement;
        const pixelsFromBottom = body.scrollHeight - parent.clientHeight - 50;

        if (parent.scrollTop < pixelsFromBottom) {
            mybuttonTop.style.display = "block";
        } else {
            mybuttonTop.style.display = "none";
        }
    });

    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }

    function bottomFuction() {
        document.getElementById('bottom').scrollIntoView({ behavior: 'smooth' });
    }
</script>
